/* tslint:disable */
/* eslint-disable */
/**
 * SwitchMap API
 * Definition of SwitchMap API
 *
 * The version of the OpenAPI document: 2.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import { Configuration } from './configuration';
import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from './common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from './base';

/**
 * JWT
 * @export
 * @interface AuthToken
 */
export interface AuthToken {
    /**
     * Token itself
     * @type {string}
     * @memberof AuthToken
     */
    'token': string;
}
/**
 * Build request
 * @export
 * @interface BuildRequest
 */
export interface BuildRequest {
    /**
     * Name of build
     * @type {string}
     * @memberof BuildRequest
     */
    'name': string;
    /**
     * Short name of build. Used in URI path
     * @type {string}
     * @memberof BuildRequest
     */
    'shortName': string;
}
/**
 * Build response
 * @export
 * @interface BuildResponse
 */
export interface BuildResponse {
    /**
     * Name of build
     * @type {string}
     * @memberof BuildResponse
     */
    'name': string;
    /**
     * Short name of build. Used in URI path
     * @type {string}
     * @memberof BuildResponse
     */
    'shortName': string;
    /**
     * Number of floors in this build
     * @type {number}
     * @memberof BuildResponse
     */
    'floorsNumber': number;
    /**
     * Number of switches in this build
     * @type {number}
     * @memberof BuildResponse
     */
    'switchesNumber': number;
}
/**
 * Floor request
 * @export
 * @interface FloorRequest
 */
export interface FloorRequest {
    /**
     * Number of floor
     * @type {number}
     * @memberof FloorRequest
     */
    'number': number;
    /**
     * Name of build of that floor
     * @type {string}
     * @memberof FloorRequest
     */
    'buildName': string;
    /**
     * Short name of build of that floor
     * @type {string}
     * @memberof FloorRequest
     */
    'buildShortName': string;
}
/**
 * 
 * @export
 * @interface FloorResponse
 */
export interface FloorResponse {
    /**
     * Number of floor
     * @type {number}
     * @memberof FloorResponse
     */
    'number': number;
    /**
     * Number of switches on that floor
     * @type {number}
     * @memberof FloorResponse
     */
    'switchesNumber': number;
}
/**
 * Requet for updating position of switch on plan
 * @export
 * @interface SavePositionRequest
 */
export interface SavePositionRequest {
    /**
     * Y-axis position of switch on plan
     * @type {number}
     * @memberof SavePositionRequest
     */
    'top': number;
    /**
     * X-axis position of switch on plan
     * @type {number}
     * @memberof SavePositionRequest
     */
    'left': number;
}
/**
 * Switch request
 * @export
 * @interface SwitchRequest
 */
export interface SwitchRequest {
    /**
     * Retrieve data from NetData service
     * @type {boolean}
     * @memberof SwitchRequest
     */
    'retrieveFromNetData': boolean;
    /**
     * Retrieve IP from DNS
     * @type {boolean}
     * @memberof SwitchRequest
     */
    'retrieveIPFromDNS': boolean;
    /**
     * Retrieve uplink from Seens service
     * @type {boolean}
     * @memberof SwitchRequest
     */
    'retrieveUpLinkFromSeens': boolean;
    /**
     * Retrieve technical data from via SNMP
     * @type {boolean}
     * @memberof SwitchRequest
     */
    'retrieveTechDataFromSNMP': boolean;
    /**
     * Name of switch
     * @type {string}
     * @memberof SwitchRequest
     */
    'name': string;
    /**
     * IP of switch. Required only if both `retrieveFromNetData` and `retrieveIPFromDNS` is set to `false`
     * @type {string}
     * @memberof SwitchRequest
     */
    'ip'?: string;
    /**
     * MAC of switch. Required only if `retrieveFromNetData` is set to `false`
     * @type {string}
     * @memberof SwitchRequest
     */
    'mac'?: string;
    /**
     * SNMP community. Required only if `retrieveTechDataFromSNMP` is set to `true`
     * @type {string}
     * @memberof SwitchRequest
     */
    'snmpCommunity': string;
    /**
     * Revision of switch. Required only if `retrieveTechDataFromSNMP` is set to `false`
     * @type {string}
     * @memberof SwitchRequest
     */
    'revision'?: string;
    /**
     * Serial number of switch. Required only if `retrieveTechDataFromSNMP` is set to `false`
     * @type {string}
     * @memberof SwitchRequest
     */
    'serial'?: string;
    /**
     * Build of switch
     * @type {string}
     * @memberof SwitchRequest
     */
    'buildShortName'?: string;
    /**
     * Floor number of switch
     * @type {number}
     * @memberof SwitchRequest
     */
    'floorNumber'?: number;
    /**
     * Y-axis position of switch on plan
     * @type {number}
     * @memberof SwitchRequest
     */
    'positionTop'?: number;
    /**
     * X-axis position of switch on plan
     * @type {number}
     * @memberof SwitchRequest
     */
    'positionLeft'?: number;
    /**
     * Name of upswitch. Required only if `retrieveUpLinkFromSeens` is set to `false`
     * @type {string}
     * @memberof SwitchRequest
     */
    'upSwitchName'?: string;
    /**
     * Port name on upswitch. Required only if `retrieveUpLinkFromSeens` is set to `false`
     * @type {string}
     * @memberof SwitchRequest
     */
    'upLink'?: string;
}
/**
 * Switch response
 * @export
 * @interface SwitchResponse
 */
export interface SwitchResponse {
    /**
     * Name of switch
     * @type {string}
     * @memberof SwitchResponse
     */
    'name': string;
    /**
     * IP of switch
     * @type {string}
     * @memberof SwitchResponse
     */
    'ip': string;
    /**
     * MAC of switch
     * @type {string}
     * @memberof SwitchResponse
     */
    'mac': string;
    /**
     * Revision of switch
     * @type {string}
     * @memberof SwitchResponse
     */
    'revision'?: string;
    /**
     * Serial number of switch
     * @type {string}
     * @memberof SwitchResponse
     */
    'serial'?: string;
    /**
     * Build of switch
     * @type {string}
     * @memberof SwitchResponse
     */
    'buildShortName'?: string;
    /**
     * Floor number of switch
     * @type {number}
     * @memberof SwitchResponse
     */
    'floorNumber'?: number;
    /**
     * Y-axis position of switch on plan
     * @type {number}
     * @memberof SwitchResponse
     */
    'positionTop'?: number;
    /**
     * X-axis position of switch on plan
     * @type {number}
     * @memberof SwitchResponse
     */
    'positionLeft'?: number;
    /**
     * Name of upswitch
     * @type {string}
     * @memberof SwitchResponse
     */
    'upSwitchName'?: string;
    /**
     * Port name on upswitch
     * @type {string}
     * @memberof SwitchResponse
     */
    'upLink'?: string;
}
/**
 * Result of adding/updating switch
 * @export
 * @interface SwitchResult
 */
export interface SwitchResult {
    /**
     * 
     * @type {SwitchResponse}
     * @memberof SwitchResult
     */
    'sw': SwitchResponse;
    /**
     * Result of retrieving uplink from Seens service
     * @type {boolean}
     * @memberof SwitchResult
     */
    'seen': boolean;
    /**
     * Result of retrieving technical data via SNMP
     * @type {boolean}
     * @memberof SwitchResult
     */
    'snmp': boolean;
}
/**
 * User login data
 * @export
 * @interface User
 */
export interface User {
    /**
     * User name
     * @type {string}
     * @memberof User
     */
    'username': string;
    /**
     * User password
     * @type {string}
     * @memberof User
     */
    'password': string;
    /**
     * If set to `true` then a long-lived token will be created
     * @type {boolean}
     * @memberof User
     */
    'rememberMe': boolean;
}

/**
 * AuthApi - axios parameter creator
 * @export
 */
export const AuthApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Authenticates user
         * @param {User} user 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postAuthLogin: async (user: User, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'user' is not null or undefined
            assertParamExists('postAuthLogin', 'user', user)
            const localVarPath = `/auth/login`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(user, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * AuthApi - functional programming interface
 * @export
 */
export const AuthApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = AuthApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Authenticates user
         * @param {User} user 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postAuthLogin(user: User, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AuthToken>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.postAuthLogin(user, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * AuthApi - factory interface
 * @export
 */
export const AuthApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = AuthApiFp(configuration)
    return {
        /**
         * 
         * @summary Authenticates user
         * @param {User} user 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postAuthLogin(user: User, options?: any): AxiosPromise<AuthToken> {
            return localVarFp.postAuthLogin(user, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * AuthApi - object-oriented interface
 * @export
 * @class AuthApi
 * @extends {BaseAPI}
 */
export class AuthApi extends BaseAPI {
    /**
     * 
     * @summary Authenticates user
     * @param {User} user 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthApi
     */
    public postAuthLogin(user: User, options?: AxiosRequestConfig) {
        return AuthApiFp(this.configuration).postAuthLogin(user, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * BuildsApi - axios parameter creator
 * @export
 */
export const BuildsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Delete build
         * @param {string} shortName 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteBuildsShortname: async (shortName: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'shortName' is not null or undefined
            assertParamExists('deleteBuildsShortname', 'shortName', shortName)
            const localVarPath = `/builds/{shortName}`
                .replace(`{${"shortName"}}`, encodeURIComponent(String(shortName)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication apiKeyAuth required
            await setApiKeyToObject(localVarHeaderParameter, "X-Auth-Token", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get all builds
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getBuilds: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/builds`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication apiKeyAuth required
            await setApiKeyToObject(localVarHeaderParameter, "X-Auth-Token", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get build by short name
         * @param {string} shortName 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getBuildsShortname: async (shortName: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'shortName' is not null or undefined
            assertParamExists('getBuildsShortname', 'shortName', shortName)
            const localVarPath = `/builds/{shortName}`
                .replace(`{${"shortName"}}`, encodeURIComponent(String(shortName)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication apiKeyAuth required
            await setApiKeyToObject(localVarHeaderParameter, "X-Auth-Token", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Add build
         * @param {BuildRequest} buildRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postBuilds: async (buildRequest: BuildRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'buildRequest' is not null or undefined
            assertParamExists('postBuilds', 'buildRequest', buildRequest)
            const localVarPath = `/builds`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication apiKeyAuth required
            await setApiKeyToObject(localVarHeaderParameter, "X-Auth-Token", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(buildRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Update build
         * @param {string} shortName 
         * @param {BuildRequest} buildRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        putBuildsShortname: async (shortName: string, buildRequest: BuildRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'shortName' is not null or undefined
            assertParamExists('putBuildsShortname', 'shortName', shortName)
            // verify required parameter 'buildRequest' is not null or undefined
            assertParamExists('putBuildsShortname', 'buildRequest', buildRequest)
            const localVarPath = `/builds/{shortName}`
                .replace(`{${"shortName"}}`, encodeURIComponent(String(shortName)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication apiKeyAuth required
            await setApiKeyToObject(localVarHeaderParameter, "X-Auth-Token", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(buildRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * BuildsApi - functional programming interface
 * @export
 */
export const BuildsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = BuildsApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Delete build
         * @param {string} shortName 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteBuildsShortname(shortName: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<boolean>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteBuildsShortname(shortName, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Get all builds
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getBuilds(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<BuildResponse>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getBuilds(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Get build by short name
         * @param {string} shortName 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getBuildsShortname(shortName: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<BuildResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getBuildsShortname(shortName, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Add build
         * @param {BuildRequest} buildRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postBuilds(buildRequest: BuildRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<boolean>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.postBuilds(buildRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Update build
         * @param {string} shortName 
         * @param {BuildRequest} buildRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async putBuildsShortname(shortName: string, buildRequest: BuildRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<boolean>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.putBuildsShortname(shortName, buildRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * BuildsApi - factory interface
 * @export
 */
export const BuildsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = BuildsApiFp(configuration)
    return {
        /**
         * 
         * @summary Delete build
         * @param {string} shortName 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteBuildsShortname(shortName: string, options?: any): AxiosPromise<boolean> {
            return localVarFp.deleteBuildsShortname(shortName, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get all builds
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getBuilds(options?: any): AxiosPromise<Array<BuildResponse>> {
            return localVarFp.getBuilds(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get build by short name
         * @param {string} shortName 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getBuildsShortname(shortName: string, options?: any): AxiosPromise<BuildResponse> {
            return localVarFp.getBuildsShortname(shortName, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Add build
         * @param {BuildRequest} buildRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postBuilds(buildRequest: BuildRequest, options?: any): AxiosPromise<boolean> {
            return localVarFp.postBuilds(buildRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Update build
         * @param {string} shortName 
         * @param {BuildRequest} buildRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        putBuildsShortname(shortName: string, buildRequest: BuildRequest, options?: any): AxiosPromise<boolean> {
            return localVarFp.putBuildsShortname(shortName, buildRequest, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * BuildsApi - object-oriented interface
 * @export
 * @class BuildsApi
 * @extends {BaseAPI}
 */
export class BuildsApi extends BaseAPI {
    /**
     * 
     * @summary Delete build
     * @param {string} shortName 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BuildsApi
     */
    public deleteBuildsShortname(shortName: string, options?: AxiosRequestConfig) {
        return BuildsApiFp(this.configuration).deleteBuildsShortname(shortName, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get all builds
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BuildsApi
     */
    public getBuilds(options?: AxiosRequestConfig) {
        return BuildsApiFp(this.configuration).getBuilds(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get build by short name
     * @param {string} shortName 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BuildsApi
     */
    public getBuildsShortname(shortName: string, options?: AxiosRequestConfig) {
        return BuildsApiFp(this.configuration).getBuildsShortname(shortName, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Add build
     * @param {BuildRequest} buildRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BuildsApi
     */
    public postBuilds(buildRequest: BuildRequest, options?: AxiosRequestConfig) {
        return BuildsApiFp(this.configuration).postBuilds(buildRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Update build
     * @param {string} shortName 
     * @param {BuildRequest} buildRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BuildsApi
     */
    public putBuildsShortname(shortName: string, buildRequest: BuildRequest, options?: AxiosRequestConfig) {
        return BuildsApiFp(this.configuration).putBuildsShortname(shortName, buildRequest, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * FloorsApi - axios parameter creator
 * @export
 */
export const FloorsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Delete floor of build by number
         * @param {string} shortName 
         * @param {number} number 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteBuildsShortnameFloorsNumber: async (shortName: string, number: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'shortName' is not null or undefined
            assertParamExists('deleteBuildsShortnameFloorsNumber', 'shortName', shortName)
            // verify required parameter 'number' is not null or undefined
            assertParamExists('deleteBuildsShortnameFloorsNumber', 'number', number)
            const localVarPath = `/builds/{shortName}/floors/{number}`
                .replace(`{${"shortName"}}`, encodeURIComponent(String(shortName)))
                .replace(`{${"number"}}`, encodeURIComponent(String(number)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication apiKeyAuth required
            await setApiKeyToObject(localVarHeaderParameter, "X-Auth-Token", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get all floors of build
         * @param {string} shortName 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getBuildsShortnameFloors: async (shortName: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'shortName' is not null or undefined
            assertParamExists('getBuildsShortnameFloors', 'shortName', shortName)
            const localVarPath = `/builds/{shortName}/floors`
                .replace(`{${"shortName"}}`, encodeURIComponent(String(shortName)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication apiKeyAuth required
            await setApiKeyToObject(localVarHeaderParameter, "X-Auth-Token", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get floor of build by number
         * @param {string} shortName 
         * @param {number} number 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getBuildsShortnameFloorsNumber: async (shortName: string, number: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'shortName' is not null or undefined
            assertParamExists('getBuildsShortnameFloorsNumber', 'shortName', shortName)
            // verify required parameter 'number' is not null or undefined
            assertParamExists('getBuildsShortnameFloorsNumber', 'number', number)
            const localVarPath = `/builds/{shortName}/floors/{number}`
                .replace(`{${"shortName"}}`, encodeURIComponent(String(shortName)))
                .replace(`{${"number"}}`, encodeURIComponent(String(number)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication apiKeyAuth required
            await setApiKeyToObject(localVarHeaderParameter, "X-Auth-Token", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Add floor to build
         * @param {string} shortName 
         * @param {FloorRequest} floorRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postBuildsShortname: async (shortName: string, floorRequest: FloorRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'shortName' is not null or undefined
            assertParamExists('postBuildsShortname', 'shortName', shortName)
            // verify required parameter 'floorRequest' is not null or undefined
            assertParamExists('postBuildsShortname', 'floorRequest', floorRequest)
            const localVarPath = `/builds/{shortName}`
                .replace(`{${"shortName"}}`, encodeURIComponent(String(shortName)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication apiKeyAuth required
            await setApiKeyToObject(localVarHeaderParameter, "X-Auth-Token", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(floorRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * FloorsApi - functional programming interface
 * @export
 */
export const FloorsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = FloorsApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Delete floor of build by number
         * @param {string} shortName 
         * @param {number} number 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteBuildsShortnameFloorsNumber(shortName: string, number: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<boolean>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteBuildsShortnameFloorsNumber(shortName, number, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Get all floors of build
         * @param {string} shortName 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getBuildsShortnameFloors(shortName: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<FloorResponse>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getBuildsShortnameFloors(shortName, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Get floor of build by number
         * @param {string} shortName 
         * @param {number} number 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getBuildsShortnameFloorsNumber(shortName: string, number: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<FloorResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getBuildsShortnameFloorsNumber(shortName, number, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Add floor to build
         * @param {string} shortName 
         * @param {FloorRequest} floorRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postBuildsShortname(shortName: string, floorRequest: FloorRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<boolean>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.postBuildsShortname(shortName, floorRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * FloorsApi - factory interface
 * @export
 */
export const FloorsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = FloorsApiFp(configuration)
    return {
        /**
         * 
         * @summary Delete floor of build by number
         * @param {string} shortName 
         * @param {number} number 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteBuildsShortnameFloorsNumber(shortName: string, number: number, options?: any): AxiosPromise<boolean> {
            return localVarFp.deleteBuildsShortnameFloorsNumber(shortName, number, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get all floors of build
         * @param {string} shortName 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getBuildsShortnameFloors(shortName: string, options?: any): AxiosPromise<Array<FloorResponse>> {
            return localVarFp.getBuildsShortnameFloors(shortName, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get floor of build by number
         * @param {string} shortName 
         * @param {number} number 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getBuildsShortnameFloorsNumber(shortName: string, number: number, options?: any): AxiosPromise<FloorResponse> {
            return localVarFp.getBuildsShortnameFloorsNumber(shortName, number, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Add floor to build
         * @param {string} shortName 
         * @param {FloorRequest} floorRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postBuildsShortname(shortName: string, floorRequest: FloorRequest, options?: any): AxiosPromise<boolean> {
            return localVarFp.postBuildsShortname(shortName, floorRequest, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * FloorsApi - object-oriented interface
 * @export
 * @class FloorsApi
 * @extends {BaseAPI}
 */
export class FloorsApi extends BaseAPI {
    /**
     * 
     * @summary Delete floor of build by number
     * @param {string} shortName 
     * @param {number} number 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FloorsApi
     */
    public deleteBuildsShortnameFloorsNumber(shortName: string, number: number, options?: AxiosRequestConfig) {
        return FloorsApiFp(this.configuration).deleteBuildsShortnameFloorsNumber(shortName, number, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get all floors of build
     * @param {string} shortName 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FloorsApi
     */
    public getBuildsShortnameFloors(shortName: string, options?: AxiosRequestConfig) {
        return FloorsApiFp(this.configuration).getBuildsShortnameFloors(shortName, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get floor of build by number
     * @param {string} shortName 
     * @param {number} number 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FloorsApi
     */
    public getBuildsShortnameFloorsNumber(shortName: string, number: number, options?: AxiosRequestConfig) {
        return FloorsApiFp(this.configuration).getBuildsShortnameFloorsNumber(shortName, number, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Add floor to build
     * @param {string} shortName 
     * @param {FloorRequest} floorRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FloorsApi
     */
    public postBuildsShortname(shortName: string, floorRequest: FloorRequest, options?: AxiosRequestConfig) {
        return FloorsApiFp(this.configuration).postBuildsShortname(shortName, floorRequest, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * PlansApi - axios parameter creator
 * @export
 */
export const PlansApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {string} planName 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPlansPlanname: async (planName: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'planName' is not null or undefined
            assertParamExists('getPlansPlanname', 'planName', planName)
            const localVarPath = `/plans/{planName}`
                .replace(`{${"planName"}}`, encodeURIComponent(String(planName)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication apiKeyAuth required
            await setApiKeyToObject(localVarHeaderParameter, "X-Auth-Token", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Upload plan
         * @param {string} shortName 
         * @param {number} number 
         * @param {any} planFile 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postPlansShortnameNumber: async (shortName: string, number: number, planFile: any, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'shortName' is not null or undefined
            assertParamExists('postPlansShortnameNumber', 'shortName', shortName)
            // verify required parameter 'number' is not null or undefined
            assertParamExists('postPlansShortnameNumber', 'number', number)
            // verify required parameter 'planFile' is not null or undefined
            assertParamExists('postPlansShortnameNumber', 'planFile', planFile)
            const localVarPath = `/plans/{shortName}/{number}`
                .replace(`{${"shortName"}}`, encodeURIComponent(String(shortName)))
                .replace(`{${"number"}}`, encodeURIComponent(String(number)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            const localVarFormParams = new ((configuration && configuration.formDataCtor) || FormData)();

            // authentication apiKeyAuth required
            await setApiKeyToObject(localVarHeaderParameter, "X-Auth-Token", configuration)


            if (planFile !== undefined) { 
                localVarFormParams.append('planFile', planFile as any);
            }
    
    
            localVarHeaderParameter['Content-Type'] = 'multipart/form-data';
    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = localVarFormParams;

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * PlansApi - functional programming interface
 * @export
 */
export const PlansApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = PlansApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {string} planName 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getPlansPlanname(planName: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getPlansPlanname(planName, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Upload plan
         * @param {string} shortName 
         * @param {number} number 
         * @param {any} planFile 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postPlansShortnameNumber(shortName: string, number: number, planFile: any, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.postPlansShortnameNumber(shortName, number, planFile, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * PlansApi - factory interface
 * @export
 */
export const PlansApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = PlansApiFp(configuration)
    return {
        /**
         * 
         * @param {string} planName 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPlansPlanname(planName: string, options?: any): AxiosPromise<any> {
            return localVarFp.getPlansPlanname(planName, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Upload plan
         * @param {string} shortName 
         * @param {number} number 
         * @param {any} planFile 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postPlansShortnameNumber(shortName: string, number: number, planFile: any, options?: any): AxiosPromise<string> {
            return localVarFp.postPlansShortnameNumber(shortName, number, planFile, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * PlansApi - object-oriented interface
 * @export
 * @class PlansApi
 * @extends {BaseAPI}
 */
export class PlansApi extends BaseAPI {
    /**
     * 
     * @param {string} planName 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PlansApi
     */
    public getPlansPlanname(planName: string, options?: AxiosRequestConfig) {
        return PlansApiFp(this.configuration).getPlansPlanname(planName, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Upload plan
     * @param {string} shortName 
     * @param {number} number 
     * @param {any} planFile 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PlansApi
     */
    public postPlansShortnameNumber(shortName: string, number: number, planFile: any, options?: AxiosRequestConfig) {
        return PlansApiFp(this.configuration).postPlansShortnameNumber(shortName, number, planFile, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * SwitchesApi - axios parameter creator
 * @export
 */
export const SwitchesApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Delete switch
         * @param {string} name 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteSwitchesName: async (name: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'name' is not null or undefined
            assertParamExists('deleteSwitchesName', 'name', name)
            const localVarPath = `/switches/{name}`
                .replace(`{${"name"}}`, encodeURIComponent(String(name)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication apiKeyAuth required
            await setApiKeyToObject(localVarHeaderParameter, "X-Auth-Token", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get all switches of floor in build
         * @param {string} shortName 
         * @param {number} number 
         * @param {*} [options] Override http request option.
         * @deprecated
         * @throws {RequiredError}
         */
        getBuildsShortnameFloorsNumberSwitches: async (shortName: string, number: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'shortName' is not null or undefined
            assertParamExists('getBuildsShortnameFloorsNumberSwitches', 'shortName', shortName)
            // verify required parameter 'number' is not null or undefined
            assertParamExists('getBuildsShortnameFloorsNumberSwitches', 'number', number)
            const localVarPath = `/builds/{shortName}/floors/{number}/switches`
                .replace(`{${"shortName"}}`, encodeURIComponent(String(shortName)))
                .replace(`{${"number"}}`, encodeURIComponent(String(number)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication apiKeyAuth required
            await setApiKeyToObject(localVarHeaderParameter, "X-Auth-Token", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get all placed switches of floor in build
         * @param {string} shortName 
         * @param {number} number 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getBuildsShortnameFloorsNumberSwitchesPlaced: async (shortName: string, number: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'shortName' is not null or undefined
            assertParamExists('getBuildsShortnameFloorsNumberSwitchesPlaced', 'shortName', shortName)
            // verify required parameter 'number' is not null or undefined
            assertParamExists('getBuildsShortnameFloorsNumberSwitchesPlaced', 'number', number)
            const localVarPath = `/builds/{shortName}/floors/{number}/switches/placed`
                .replace(`{${"shortName"}}`, encodeURIComponent(String(shortName)))
                .replace(`{${"number"}}`, encodeURIComponent(String(number)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication apiKeyAuth required
            await setApiKeyToObject(localVarHeaderParameter, "X-Auth-Token", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get all switches of build
         * @param {string} shortName 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getBuildsShortnameSwitches: async (shortName: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'shortName' is not null or undefined
            assertParamExists('getBuildsShortnameSwitches', 'shortName', shortName)
            const localVarPath = `/builds/{shortName}/switches`
                .replace(`{${"shortName"}}`, encodeURIComponent(String(shortName)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication apiKeyAuth required
            await setApiKeyToObject(localVarHeaderParameter, "X-Auth-Token", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get all unplaced switches in build
         * @param {string} shortName 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getBuildsShortnameSwitchesUnplaced: async (shortName: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'shortName' is not null or undefined
            assertParamExists('getBuildsShortnameSwitchesUnplaced', 'shortName', shortName)
            const localVarPath = `/builds/{shortName}/switches/unplaced`
                .replace(`{${"shortName"}}`, encodeURIComponent(String(shortName)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication apiKeyAuth required
            await setApiKeyToObject(localVarHeaderParameter, "X-Auth-Token", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get all switches
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSwitches: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/switches`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication apiKeyAuth required
            await setApiKeyToObject(localVarHeaderParameter, "X-Auth-Token", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get switch by name
         * @param {string} name 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSwitchesName: async (name: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'name' is not null or undefined
            assertParamExists('getSwitchesName', 'name', name)
            const localVarPath = `/switches/{name}`
                .replace(`{${"name"}}`, encodeURIComponent(String(name)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication apiKeyAuth required
            await setApiKeyToObject(localVarHeaderParameter, "X-Auth-Token", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get SNMP communitites
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSwitchesSnmpCommunities: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/switches/snmp/communities`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication apiKeyAuth required
            await setApiKeyToObject(localVarHeaderParameter, "X-Auth-Token", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Run switches sync with network
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSwitchesSync: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/switches/sync`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication apiKeyAuth required
            await setApiKeyToObject(localVarHeaderParameter, "X-Auth-Token", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Update switch position
         * @param {string} name 
         * @param {SavePositionRequest} savePositionRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        patchSwitchesName: async (name: string, savePositionRequest: SavePositionRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'name' is not null or undefined
            assertParamExists('patchSwitchesName', 'name', name)
            // verify required parameter 'savePositionRequest' is not null or undefined
            assertParamExists('patchSwitchesName', 'savePositionRequest', savePositionRequest)
            const localVarPath = `/switches/{name}`
                .replace(`{${"name"}}`, encodeURIComponent(String(name)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication apiKeyAuth required
            await setApiKeyToObject(localVarHeaderParameter, "X-Auth-Token", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(savePositionRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Add switch
         * @param {SwitchRequest} switchRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postSwitches: async (switchRequest: SwitchRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'switchRequest' is not null or undefined
            assertParamExists('postSwitches', 'switchRequest', switchRequest)
            const localVarPath = `/switches`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication apiKeyAuth required
            await setApiKeyToObject(localVarHeaderParameter, "X-Auth-Token", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(switchRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Update switch
         * @param {string} name 
         * @param {SwitchRequest} switchRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        putSwitchesName: async (name: string, switchRequest: SwitchRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'name' is not null or undefined
            assertParamExists('putSwitchesName', 'name', name)
            // verify required parameter 'switchRequest' is not null or undefined
            assertParamExists('putSwitchesName', 'switchRequest', switchRequest)
            const localVarPath = `/switches/{name}`
                .replace(`{${"name"}}`, encodeURIComponent(String(name)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication apiKeyAuth required
            await setApiKeyToObject(localVarHeaderParameter, "X-Auth-Token", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(switchRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * SwitchesApi - functional programming interface
 * @export
 */
export const SwitchesApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = SwitchesApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Delete switch
         * @param {string} name 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteSwitchesName(name: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<boolean>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteSwitchesName(name, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Get all switches of floor in build
         * @param {string} shortName 
         * @param {number} number 
         * @param {*} [options] Override http request option.
         * @deprecated
         * @throws {RequiredError}
         */
        async getBuildsShortnameFloorsNumberSwitches(shortName: string, number: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<SwitchResponse>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getBuildsShortnameFloorsNumberSwitches(shortName, number, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Get all placed switches of floor in build
         * @param {string} shortName 
         * @param {number} number 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getBuildsShortnameFloorsNumberSwitchesPlaced(shortName: string, number: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<SwitchResponse>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getBuildsShortnameFloorsNumberSwitchesPlaced(shortName, number, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Get all switches of build
         * @param {string} shortName 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getBuildsShortnameSwitches(shortName: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<SwitchResponse>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getBuildsShortnameSwitches(shortName, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Get all unplaced switches in build
         * @param {string} shortName 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getBuildsShortnameSwitchesUnplaced(shortName: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<SwitchResponse>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getBuildsShortnameSwitchesUnplaced(shortName, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Get all switches
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getSwitches(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<SwitchResponse>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getSwitches(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Get switch by name
         * @param {string} name 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getSwitchesName(name: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SwitchResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getSwitchesName(name, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Get SNMP communitites
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getSwitchesSnmpCommunities(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<string>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getSwitchesSnmpCommunities(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Run switches sync with network
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getSwitchesSync(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getSwitchesSync(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Update switch position
         * @param {string} name 
         * @param {SavePositionRequest} savePositionRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async patchSwitchesName(name: string, savePositionRequest: SavePositionRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<boolean>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.patchSwitchesName(name, savePositionRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Add switch
         * @param {SwitchRequest} switchRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postSwitches(switchRequest: SwitchRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SwitchResult>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.postSwitches(switchRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Update switch
         * @param {string} name 
         * @param {SwitchRequest} switchRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async putSwitchesName(name: string, switchRequest: SwitchRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SwitchResult>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.putSwitchesName(name, switchRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * SwitchesApi - factory interface
 * @export
 */
export const SwitchesApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = SwitchesApiFp(configuration)
    return {
        /**
         * 
         * @summary Delete switch
         * @param {string} name 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteSwitchesName(name: string, options?: any): AxiosPromise<boolean> {
            return localVarFp.deleteSwitchesName(name, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get all switches of floor in build
         * @param {string} shortName 
         * @param {number} number 
         * @param {*} [options] Override http request option.
         * @deprecated
         * @throws {RequiredError}
         */
        getBuildsShortnameFloorsNumberSwitches(shortName: string, number: number, options?: any): AxiosPromise<Array<SwitchResponse>> {
            return localVarFp.getBuildsShortnameFloorsNumberSwitches(shortName, number, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get all placed switches of floor in build
         * @param {string} shortName 
         * @param {number} number 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getBuildsShortnameFloorsNumberSwitchesPlaced(shortName: string, number: number, options?: any): AxiosPromise<Array<SwitchResponse>> {
            return localVarFp.getBuildsShortnameFloorsNumberSwitchesPlaced(shortName, number, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get all switches of build
         * @param {string} shortName 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getBuildsShortnameSwitches(shortName: string, options?: any): AxiosPromise<Array<SwitchResponse>> {
            return localVarFp.getBuildsShortnameSwitches(shortName, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get all unplaced switches in build
         * @param {string} shortName 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getBuildsShortnameSwitchesUnplaced(shortName: string, options?: any): AxiosPromise<Array<SwitchResponse>> {
            return localVarFp.getBuildsShortnameSwitchesUnplaced(shortName, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get all switches
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSwitches(options?: any): AxiosPromise<Array<SwitchResponse>> {
            return localVarFp.getSwitches(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get switch by name
         * @param {string} name 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSwitchesName(name: string, options?: any): AxiosPromise<SwitchResponse> {
            return localVarFp.getSwitchesName(name, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get SNMP communitites
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSwitchesSnmpCommunities(options?: any): AxiosPromise<Array<string>> {
            return localVarFp.getSwitchesSnmpCommunities(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Run switches sync with network
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSwitchesSync(options?: any): AxiosPromise<void> {
            return localVarFp.getSwitchesSync(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Update switch position
         * @param {string} name 
         * @param {SavePositionRequest} savePositionRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        patchSwitchesName(name: string, savePositionRequest: SavePositionRequest, options?: any): AxiosPromise<boolean> {
            return localVarFp.patchSwitchesName(name, savePositionRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Add switch
         * @param {SwitchRequest} switchRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postSwitches(switchRequest: SwitchRequest, options?: any): AxiosPromise<SwitchResult> {
            return localVarFp.postSwitches(switchRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Update switch
         * @param {string} name 
         * @param {SwitchRequest} switchRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        putSwitchesName(name: string, switchRequest: SwitchRequest, options?: any): AxiosPromise<SwitchResult> {
            return localVarFp.putSwitchesName(name, switchRequest, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * SwitchesApi - object-oriented interface
 * @export
 * @class SwitchesApi
 * @extends {BaseAPI}
 */
export class SwitchesApi extends BaseAPI {
    /**
     * 
     * @summary Delete switch
     * @param {string} name 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SwitchesApi
     */
    public deleteSwitchesName(name: string, options?: AxiosRequestConfig) {
        return SwitchesApiFp(this.configuration).deleteSwitchesName(name, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get all switches of floor in build
     * @param {string} shortName 
     * @param {number} number 
     * @param {*} [options] Override http request option.
     * @deprecated
     * @throws {RequiredError}
     * @memberof SwitchesApi
     */
    public getBuildsShortnameFloorsNumberSwitches(shortName: string, number: number, options?: AxiosRequestConfig) {
        return SwitchesApiFp(this.configuration).getBuildsShortnameFloorsNumberSwitches(shortName, number, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get all placed switches of floor in build
     * @param {string} shortName 
     * @param {number} number 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SwitchesApi
     */
    public getBuildsShortnameFloorsNumberSwitchesPlaced(shortName: string, number: number, options?: AxiosRequestConfig) {
        return SwitchesApiFp(this.configuration).getBuildsShortnameFloorsNumberSwitchesPlaced(shortName, number, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get all switches of build
     * @param {string} shortName 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SwitchesApi
     */
    public getBuildsShortnameSwitches(shortName: string, options?: AxiosRequestConfig) {
        return SwitchesApiFp(this.configuration).getBuildsShortnameSwitches(shortName, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get all unplaced switches in build
     * @param {string} shortName 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SwitchesApi
     */
    public getBuildsShortnameSwitchesUnplaced(shortName: string, options?: AxiosRequestConfig) {
        return SwitchesApiFp(this.configuration).getBuildsShortnameSwitchesUnplaced(shortName, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get all switches
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SwitchesApi
     */
    public getSwitches(options?: AxiosRequestConfig) {
        return SwitchesApiFp(this.configuration).getSwitches(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get switch by name
     * @param {string} name 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SwitchesApi
     */
    public getSwitchesName(name: string, options?: AxiosRequestConfig) {
        return SwitchesApiFp(this.configuration).getSwitchesName(name, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get SNMP communitites
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SwitchesApi
     */
    public getSwitchesSnmpCommunities(options?: AxiosRequestConfig) {
        return SwitchesApiFp(this.configuration).getSwitchesSnmpCommunities(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Run switches sync with network
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SwitchesApi
     */
    public getSwitchesSync(options?: AxiosRequestConfig) {
        return SwitchesApiFp(this.configuration).getSwitchesSync(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Update switch position
     * @param {string} name 
     * @param {SavePositionRequest} savePositionRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SwitchesApi
     */
    public patchSwitchesName(name: string, savePositionRequest: SavePositionRequest, options?: AxiosRequestConfig) {
        return SwitchesApiFp(this.configuration).patchSwitchesName(name, savePositionRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Add switch
     * @param {SwitchRequest} switchRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SwitchesApi
     */
    public postSwitches(switchRequest: SwitchRequest, options?: AxiosRequestConfig) {
        return SwitchesApiFp(this.configuration).postSwitches(switchRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Update switch
     * @param {string} name 
     * @param {SwitchRequest} switchRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SwitchesApi
     */
    public putSwitchesName(name: string, switchRequest: SwitchRequest, options?: AxiosRequestConfig) {
        return SwitchesApiFp(this.configuration).putSwitchesName(name, switchRequest, options).then((request) => request(this.axios, this.basePath));
    }
}


